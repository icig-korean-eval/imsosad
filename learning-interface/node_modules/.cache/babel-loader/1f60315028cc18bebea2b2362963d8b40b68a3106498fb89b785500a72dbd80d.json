{"ast":null,"code":"var _jsxFileName = \"/Users/bagjun-won/test-3d/learning-interface/src/components/FeedbackSystem.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedbackSystem = ({\n  feedback,\n  visible\n}) => {\n  // Function to handle text-to-speech for feedback\n  const handlePlayFeedback = () => {\n    if (!feedback) return;\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(feedback);\n      utterance.lang = feedback.match(/[„Ñ±-„Öé|„Öè-„Ö£|Í∞Ä-Ìû£]/) ? 'ko-KR' : 'en-US';\n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.log('Text-to-speech not supported in this browser');\n    }\n  };\n  if (!visible) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feedback-container h-full p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedback-header flex justify-between items-center mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"feedback-title\",\n        children: \"\\uD83D\\uDCE2 Automated feedback system\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), feedback && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"play-button text-gray-600 hover:text-gray-900\",\n        onClick: handlePlayFeedback,\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"24\",\n          height: \"24\",\n          viewBox: \"0 0 24 24\",\n          fill: \"none\",\n          stroke: \"currentColor\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n            points: \"5 3 19 12 5 21 5 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedback-content\",\n      children: feedback ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"whitespace-pre-line\",\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-500 italic\",\n        children: \"No feedback available yet. Once you practice speaking, you'll receive automated feedback here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = FeedbackSystem;\nexport default FeedbackSystem;\nvar _c;\n$RefreshReg$(_c, \"FeedbackSystem\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FeedbackSystem","feedback","visible","handlePlayFeedback","window","utterance","SpeechSynthesisUtterance","lang","match","speechSynthesis","speak","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","_c","$RefreshReg$"],"sources":["/Users/bagjun-won/test-3d/learning-interface/src/components/FeedbackSystem.tsx"],"sourcesContent":["import React from 'react';\n\ninterface FeedbackSystemProps {\n  feedback: string | null;\n  visible: boolean;\n}\n\nconst FeedbackSystem: React.FC<FeedbackSystemProps> = ({ feedback, visible }) => {\n  // Function to handle text-to-speech for feedback\n  const handlePlayFeedback = () => {\n    if (!feedback) return;\n    \n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(feedback);\n      utterance.lang = feedback.match(/[„Ñ±-„Öé|„Öè-„Ö£|Í∞Ä-Ìû£]/) ? 'ko-KR' : 'en-US';\n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.log('Text-to-speech not supported in this browser');\n    }\n  };\n  \n  if (!visible) return null;\n  \n  return (\n    <div className=\"feedback-container h-full p-6\">\n      <div className=\"feedback-header flex justify-between items-center mb-6\">\n        <h2 className=\"feedback-title\">üì¢ Automated feedback system</h2>\n        {feedback && (\n          <button \n            className=\"play-button text-gray-600 hover:text-gray-900\"\n            onClick={handlePlayFeedback}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <polygon points=\"5 3 19 12 5 21 5 3\"></polygon>\n            </svg>\n          </button>\n        )}\n      </div>\n      \n      <div className=\"feedback-content\">\n        {feedback ? (\n          <div className=\"whitespace-pre-line\">{feedback}</div>\n        ) : (\n          <div className=\"text-gray-500 italic\">\n            No feedback available yet. Once you practice speaking, you'll receive automated feedback here.\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FeedbackSystem;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1B,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAC/E;EACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAACF,QAAQ,EAAE;IAEf,IAAI,iBAAiB,IAAIG,MAAM,EAAE;MAC/B,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACL,QAAQ,CAAC;MACxDI,SAAS,CAACE,IAAI,GAAGN,QAAQ,CAACO,KAAK,CAAC,eAAe,CAAC,GAAG,OAAO,GAAG,OAAO;MACpEJ,MAAM,CAACK,eAAe,CAACC,KAAK,CAACL,SAAS,CAAC;IACzC,CAAC,MAAM;MACLM,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAC7D;EACF,CAAC;EAED,IAAI,CAACV,OAAO,EAAE,OAAO,IAAI;EAEzB,oBACEH,OAAA;IAAKc,SAAS,EAAC,+BAA+B;IAAAC,QAAA,gBAC5Cf,OAAA;MAAKc,SAAS,EAAC,wDAAwD;MAAAC,QAAA,gBACrEf,OAAA;QAAIc,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAC;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC/DjB,QAAQ,iBACPF,OAAA;QACEc,SAAS,EAAC,+CAA+C;QACzDM,OAAO,EAAEhB,kBAAmB;QAAAW,QAAA,eAE5Bf,OAAA;UAAKqB,KAAK,EAAC,4BAA4B;UAACC,KAAK,EAAC,IAAI;UAACC,MAAM,EAAC,IAAI;UAACC,OAAO,EAAC,WAAW;UAACC,IAAI,EAAC,MAAM;UAACC,MAAM,EAAC,cAAc;UAACC,WAAW,EAAC,GAAG;UAACC,aAAa,EAAC,OAAO;UAACC,cAAc,EAAC,OAAO;UAAAd,QAAA,eAC/Kf,OAAA;YAAS8B,MAAM,EAAC;UAAoB;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAU;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENnB,OAAA;MAAKc,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9Bb,QAAQ,gBACPF,OAAA;QAAKc,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAAEb;MAAQ;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,gBAErDnB,OAAA;QAAKc,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAEtC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACY,EAAA,GA3CI9B,cAA6C;AA6CnD,eAAeA,cAAc;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}