{"ast":null,"code":"/**\n * 오디오 녹음 및 재생을 위한 유틸리티 클래스\n */\nexport class AudioRecorder {\n  constructor() {\n    this.mediaRecorder = null;\n    this.audioChunks = [];\n  }\n  /**\n   * 오디오 녹음 시작\n   */\n  async startRecording() {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      this.mediaRecorder = new MediaRecorder(stream);\n      this.audioChunks = [];\n      this.mediaRecorder.addEventListener('dataavailable', event => {\n        if (event.data.size > 0) {\n          this.audioChunks.push(event.data);\n        }\n      });\n      this.mediaRecorder.start();\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      throw new Error('Failed to start recording');\n    }\n  }\n\n  /**\n   * 오디오 녹음 중지 및 Blob 반환\n   */\n  async stopRecording() {\n    return new Promise((resolve, reject) => {\n      if (!this.mediaRecorder) {\n        reject(new Error('MediaRecorder not initialized'));\n        return;\n      }\n      this.mediaRecorder.addEventListener('stop', () => {\n        var _this$mediaRecorder;\n        const audioBlob = new Blob(this.audioChunks, {\n          type: 'audio/webm'\n        });\n\n        // 스트림 트랙 중지\n        if ((_this$mediaRecorder = this.mediaRecorder) !== null && _this$mediaRecorder !== void 0 && _this$mediaRecorder.stream) {\n          this.mediaRecorder.stream.getTracks().forEach(track => track.stop());\n        }\n        resolve(audioBlob);\n      });\n      this.mediaRecorder.stop();\n    });\n  }\n\n  /**\n   * Blob에서 오디오 URL 생성\n   */\n  static createAudioURL(blob) {\n    return URL.createObjectURL(blob);\n  }\n\n  /**\n   * 오디오 URL 해제\n   */\n  static revokeAudioURL(url) {\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * 텍스트를 음성으로 변환 (TTS)\n   */\n  static textToSpeech(text, lang = 'ko-KR') {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = lang;\n    return utterance;\n  }\n\n  /**\n   * 한국어 텍스트 여부 확인\n   */\n  static isKoreanText(text) {\n    return !!text.match(/[ㄱ-ㅣ|가-힣]/);\n  }\n}","map":{"version":3,"names":["AudioRecorder","constructor","mediaRecorder","audioChunks","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","addEventListener","event","data","size","push","start","error","console","Error","stopRecording","Promise","resolve","reject","_this$mediaRecorder","audioBlob","Blob","type","getTracks","forEach","track","stop","createAudioURL","blob","URL","createObjectURL","revokeAudioURL","url","revokeObjectURL","textToSpeech","text","lang","utterance","SpeechSynthesisUtterance","isKoreanText","match"],"sources":["/Users/bagjun-won/test-3d/learning-interface/src/services/audioService.ts"],"sourcesContent":["/**\n * 오디오 녹음 및 재생을 위한 유틸리티 클래스\n */\nexport class AudioRecorder {\n  private mediaRecorder: MediaRecorder | null = null;\n  private audioChunks: Blob[] = [];\n  \n  /**\n   * 오디오 녹음 시작\n   */\n  public async startRecording(): Promise<void> {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      this.mediaRecorder = new MediaRecorder(stream);\n      this.audioChunks = [];\n      \n      this.mediaRecorder.addEventListener('dataavailable', (event) => {\n        if (event.data.size > 0) {\n          this.audioChunks.push(event.data);\n        }\n      });\n      \n      this.mediaRecorder.start();\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      throw new Error('Failed to start recording');\n    }\n  }\n  \n  /**\n   * 오디오 녹음 중지 및 Blob 반환\n   */\n  public async stopRecording(): Promise<Blob> {\n    return new Promise((resolve, reject) => {\n      if (!this.mediaRecorder) {\n        reject(new Error('MediaRecorder not initialized'));\n        return;\n      }\n      \n      this.mediaRecorder.addEventListener('stop', () => {\n        const audioBlob = new Blob(this.audioChunks, { type: 'audio/webm' });\n        \n        // 스트림 트랙 중지\n        if (this.mediaRecorder?.stream) {\n          this.mediaRecorder.stream.getTracks().forEach(track => track.stop());\n        }\n        \n        resolve(audioBlob);\n      });\n      \n      this.mediaRecorder.stop();\n    });\n  }\n  \n  /**\n   * Blob에서 오디오 URL 생성\n   */\n  public static createAudioURL(blob: Blob): string {\n    return URL.createObjectURL(blob);\n  }\n  \n  /**\n   * 오디오 URL 해제\n   */\n  public static revokeAudioURL(url: string): void {\n    URL.revokeObjectURL(url);\n  }\n  \n  /**\n   * 텍스트를 음성으로 변환 (TTS)\n   */\n  public static textToSpeech(text: string, lang: string = 'ko-KR'): SpeechSynthesisUtterance {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = lang;\n    return utterance;\n  }\n  \n  /**\n   * 한국어 텍스트 여부 확인\n   */\n  public static isKoreanText(text: string): boolean {\n    return !!text.match(/[ㄱ-ㅣ|가-힣]/);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,CAAC;EAAAC,YAAA;IAAA,KACjBC,aAAa,GAAyB,IAAI;IAAA,KAC1CC,WAAW,GAAW,EAAE;EAAA;EAEhC;AACF;AACA;EACE,MAAaC,cAAcA,CAAA,EAAkB;IAC3C,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MAEzE,IAAI,CAACP,aAAa,GAAG,IAAIQ,aAAa,CAACL,MAAM,CAAC;MAC9C,IAAI,CAACF,WAAW,GAAG,EAAE;MAErB,IAAI,CAACD,aAAa,CAACS,gBAAgB,CAAC,eAAe,EAAGC,KAAK,IAAK;QAC9D,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACvB,IAAI,CAACX,WAAW,CAACY,IAAI,CAACH,KAAK,CAACC,IAAI,CAAC;QACnC;MACF,CAAC,CAAC;MAEF,IAAI,CAACX,aAAa,CAACc,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIE,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF;;EAEA;AACF;AACA;EACE,MAAaC,aAAaA,CAAA,EAAkB;IAC1C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI,CAAC,IAAI,CAACrB,aAAa,EAAE;QACvBqB,MAAM,CAAC,IAAIJ,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAClD;MACF;MAEA,IAAI,CAACjB,aAAa,CAACS,gBAAgB,CAAC,MAAM,EAAE,MAAM;QAAA,IAAAa,mBAAA;QAChD,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,IAAI,CAACvB,WAAW,EAAE;UAAEwB,IAAI,EAAE;QAAa,CAAC,CAAC;;QAEpE;QACA,KAAAH,mBAAA,GAAI,IAAI,CAACtB,aAAa,cAAAsB,mBAAA,eAAlBA,mBAAA,CAAoBnB,MAAM,EAAE;UAC9B,IAAI,CAACH,aAAa,CAACG,MAAM,CAACuB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;QACtE;QAEAT,OAAO,CAACG,SAAS,CAAC;MACpB,CAAC,CAAC;MAEF,IAAI,CAACvB,aAAa,CAAC6B,IAAI,CAAC,CAAC;IAC3B,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,OAAcC,cAAcA,CAACC,IAAU,EAAU;IAC/C,OAAOC,GAAG,CAACC,eAAe,CAACF,IAAI,CAAC;EAClC;;EAEA;AACF;AACA;EACE,OAAcG,cAAcA,CAACC,GAAW,EAAQ;IAC9CH,GAAG,CAACI,eAAe,CAACD,GAAG,CAAC;EAC1B;;EAEA;AACF;AACA;EACE,OAAcE,YAAYA,CAACC,IAAY,EAAEC,IAAY,GAAG,OAAO,EAA4B;IACzF,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACH,IAAI,CAAC;IACpDE,SAAS,CAACD,IAAI,GAAGA,IAAI;IACrB,OAAOC,SAAS;EAClB;;EAEA;AACF;AACA;EACE,OAAcE,YAAYA,CAACJ,IAAY,EAAW;IAChD,OAAO,CAAC,CAACA,IAAI,CAACK,KAAK,CAAC,WAAW,CAAC;EAClC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}