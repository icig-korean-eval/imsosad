{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kimmi\\\\Desktop\\\\learning-interface\\\\learning-interface\\\\src\\\\context\\\\LearningContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/LearningContext.tsx\nimport React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { AudioRecorder, transcribeAudio } from '../services/audioService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LearningContext = /*#__PURE__*/createContext(undefined);\nconst generateId = () => Math.random().toString(36).substring(2, 15);\nexport const LearningProvider = ({\n  children\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    type: 'ai',\n    text: 'Hello, ICIG! Tell me the situation you want to learn. For example, ordering at a caf√©!',\n    id: 'initial-message'\n  }]);\n  const [currentStage, setCurrentStage] = useState('initial');\n  const [feedback, setFeedback] = useState('');\n  const [showFeedbackContent, setShowFeedbackContent] = useState(false);\n  const [aiHasResponded, setAiHasResponded] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioURL, setAudioURL] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(null);\n  const [chatId, setChatId] = useState(null);\n  const recorderRef = useRef(null);\n  const utteranceRef = useRef(null);\n  useEffect(() => {\n    recorderRef.current = new AudioRecorder();\n    return () => {\n      if (audioURL) AudioRecorder.revokeAudioURL(audioURL);\n    };\n  }, [audioURL]);\n  const addMessage = message => {\n    const newMessage = {\n      ...message,\n      id: generateId()\n    };\n    setMessages(prev => [...prev, newMessage]);\n  };\n  const updateFeedback = newFeedback => {\n    setFeedback(newFeedback);\n    setShowFeedbackContent(true);\n    setCurrentStage('feedback');\n    setAiHasResponded(true);\n  };\n  const formatFeedback = feedbackData => {\n    var _feedbackData$grammat, _feedbackData$better_;\n    let result = '';\n    if ((feedbackData === null || feedbackData === void 0 ? void 0 : (_feedbackData$grammat = feedbackData.grammatical_errors) === null || _feedbackData$grammat === void 0 ? void 0 : _feedbackData$grammat.length) > 0) {\n      result += 'üõ† Grammar:\\n';\n      feedbackData.grammatical_errors.forEach(e => {\n        result += `- ‚ùå ${e[\"Incorrect part\"]} ‚Üí ‚úÖ ${e[\"Corrected version\"]} (${e[\"Reason\"]})\\n`;\n      });\n    }\n    if ((feedbackData === null || feedbackData === void 0 ? void 0 : (_feedbackData$better_ = feedbackData.better_expressions) === null || _feedbackData$better_ === void 0 ? void 0 : _feedbackData$better_.length) > 0) {\n      result += '\\nüí° Better expressions:\\n';\n      feedbackData.better_expressions.forEach(e => {\n        result += `- ‚úèÔ∏è ${e[\"Original part\"]} ‚Üí üí¨ ${e[\"Suggestion\"]} (${e[\"Reason\"]})\\n`;\n      });\n    }\n    return result || '‚úÖ Good job!';\n  };\n  const createChat = async situation => {\n    const res = await fetch('http://175.212.190.95:8010/api/v1/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        situation\n      })\n    });\n    const data = await res.json();\n    setChatId(data.chat_id);\n    addMessage({\n      type: 'ai',\n      text: `Great! Let‚Äôs begin practicing: \"${situation}\".`\n    });\n  };\n  const getIPA = async text => {\n    const res = await fetch('http://175.212.190.95:8010/api/v1/ipa/text', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await res.json();\n    return data.result_array.join(' ');\n  };\n  const sendUserMessage = async message => {\n    if (!chatId) return;\n    addMessage({\n      type: 'user',\n      text: message\n    });\n    setCurrentStage('userInput');\n    const res = await fetch('http://175.212.190.95:8010/api/v1/chat/conversation', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        chat_id: chatId,\n        message\n      })\n    });\n    const data = await res.json();\n    addMessage({\n      type: 'ai',\n      text: data.reply\n    });\n    const ipaText = await getIPA(message);\n    updateFeedback(formatFeedback(data.feedback) + `\\n\\nüó£ IPA: ${ipaText}`);\n  };\n  const toggleRecording = async () => {\n    if (isRecording) {\n      setIsRecording(false);\n      if (recorderRef.current) {\n        const audioBlob = await recorderRef.current.stopRecording();\n        const url = AudioRecorder.createAudioURL(audioBlob);\n        setAudioURL(url);\n        const userInput = await transcribeAudio(audioBlob);\n        await sendUserMessage(userInput);\n      }\n    } else {\n      if (recorderRef.current) {\n        await recorderRef.current.startRecording();\n        setIsRecording(true);\n      }\n    }\n  };\n  const handlePlayAudio = (text, id) => {\n    if ('speechSynthesis' in window) {\n      if (isPlaying === id) {\n        window.speechSynthesis.cancel();\n        setIsPlaying(null);\n        return;\n      }\n      if (isPlaying) window.speechSynthesis.cancel();\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = /[„Ñ±-„Öé|Í∞Ä-Ìû£]/.test(text) ? 'ko-KR' : 'en-US';\n      utteranceRef.current = utterance;\n      setIsPlaying(id);\n      utterance.onend = () => {\n        setIsPlaying(null);\n        utteranceRef.current = null;\n      };\n      window.speechSynthesis.speak(utterance);\n    }\n  };\n  const contextValue = {\n    messages,\n    currentStage,\n    feedback,\n    isRecording,\n    audioURL,\n    isPlaying,\n    showFeedbackContent,\n    aiHasResponded,\n    addMessage,\n    setCurrentStage,\n    setFeedback,\n    toggleRecording,\n    handlePlayAudio,\n    setShowFeedbackContent,\n    setAiHasResponded,\n    createChat\n  };\n  return /*#__PURE__*/_jsxDEV(LearningContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(LearningProvider, \"rilbzsaDFZh3Pyz+Xe7fV5A9wrY=\");\n_c = LearningProvider;\nexport const useLearning = () => {\n  _s2();\n  const context = useContext(LearningContext);\n  if (context === undefined) {\n    throw new Error('useLearning must be used within a LearningProvider');\n  }\n  return context;\n};\n_s2(useLearning, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LearningProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","useEffect","AudioRecorder","transcribeAudio","jsxDEV","_jsxDEV","LearningContext","undefined","generateId","Math","random","toString","substring","LearningProvider","children","_s","messages","setMessages","type","text","id","currentStage","setCurrentStage","feedback","setFeedback","showFeedbackContent","setShowFeedbackContent","aiHasResponded","setAiHasResponded","isRecording","setIsRecording","audioURL","setAudioURL","isPlaying","setIsPlaying","chatId","setChatId","recorderRef","utteranceRef","current","revokeAudioURL","addMessage","message","newMessage","prev","updateFeedback","newFeedback","formatFeedback","feedbackData","_feedbackData$grammat","_feedbackData$better_","result","grammatical_errors","length","forEach","e","better_expressions","createChat","situation","res","fetch","method","headers","body","JSON","stringify","data","json","chat_id","getIPA","result_array","join","sendUserMessage","reply","ipaText","toggleRecording","audioBlob","stopRecording","url","createAudioURL","userInput","startRecording","handlePlayAudio","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","lang","test","onend","speak","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLearning","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/kimmi/Desktop/learning-interface/learning-interface/src/context/LearningContext.tsx"],"sourcesContent":["// src/context/LearningContext.tsx\nimport React, { createContext, useContext, useState, useRef, useEffect } from 'react';\nimport { Message, LearningStage, LearningContextType } from '../types/index';\nimport { AudioRecorder, transcribeAudio } from '../services/audioService';\n\nconst LearningContext = createContext<LearningContextType | undefined>(undefined);\n\nconst generateId = () => Math.random().toString(36).substring(2, 15);\n\nexport const LearningProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      type: 'ai',\n      text: 'Hello, ICIG! Tell me the situation you want to learn. For example, ordering at a caf√©!',\n      id: 'initial-message'\n    }\n  ]);\n  const [currentStage, setCurrentStage] = useState<LearningStage>('initial');\n  const [feedback, setFeedback] = useState<string>('');\n  const [showFeedbackContent, setShowFeedbackContent] = useState(false);\n  const [aiHasResponded, setAiHasResponded] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioURL, setAudioURL] = useState<string | null>(null);\n  const [isPlaying, setIsPlaying] = useState<string | null>(null);\n  const [chatId, setChatId] = useState<string | null>(null);\n\n  const recorderRef = useRef<AudioRecorder | null>(null);\n  const utteranceRef = useRef<SpeechSynthesisUtterance | null>(null);\n\n  useEffect(() => {\n    recorderRef.current = new AudioRecorder();\n    return () => {\n      if (audioURL) AudioRecorder.revokeAudioURL(audioURL);\n    };\n  }, [audioURL]);\n\n  const addMessage = (message: Omit<Message, 'id'>) => {\n    const newMessage = { ...message, id: generateId() };\n    setMessages(prev => [...prev, newMessage]);\n  };\n\n  const updateFeedback = (newFeedback: string) => {\n    setFeedback(newFeedback);\n    setShowFeedbackContent(true);\n    setCurrentStage('feedback');\n    setAiHasResponded(true);\n  };\n\n  const formatFeedback = (feedbackData: any) => {\n    let result = '';\n    if (feedbackData?.grammatical_errors?.length > 0) {\n      result += 'üõ† Grammar:\\n';\n      feedbackData.grammatical_errors.forEach((e: any) => {\n        result += `- ‚ùå ${e[\"Incorrect part\"]} ‚Üí ‚úÖ ${e[\"Corrected version\"]} (${e[\"Reason\"]})\\n`;\n      });\n    }\n    if (feedbackData?.better_expressions?.length > 0) {\n      result += '\\nüí° Better expressions:\\n';\n      feedbackData.better_expressions.forEach((e: any) => {\n        result += `- ‚úèÔ∏è ${e[\"Original part\"]} ‚Üí üí¨ ${e[\"Suggestion\"]} (${e[\"Reason\"]})\\n`;\n      });\n    }\n    return result || '‚úÖ Good job!';\n  };\n\n  const createChat = async (situation: string) => {\n    const res = await fetch('http://175.212.190.95:8010/api/v1/chat', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ situation })\n    });\n    const data = await res.json();\n    setChatId(data.chat_id);\n    addMessage({ type: 'ai', text: `Great! Let‚Äôs begin practicing: \"${situation}\".` });\n  };\n\n  const getIPA = async (text: string) => {\n    const res = await fetch('http://175.212.190.95:8010/api/v1/ipa/text', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text })\n    });\n    const data = await res.json();\n    return data.result_array.join(' ');\n  };\n\n  const sendUserMessage = async (message: string) => {\n    if (!chatId) return;\n    addMessage({ type: 'user', text: message });\n    setCurrentStage('userInput');\n    const res = await fetch('http://175.212.190.95:8010/api/v1/chat/conversation', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ chat_id: chatId, message })\n    });\n    const data = await res.json();\n    addMessage({ type: 'ai', text: data.reply });\n    const ipaText = await getIPA(message);\n    updateFeedback(formatFeedback(data.feedback) + `\\n\\nüó£ IPA: ${ipaText}`);\n  };\n\n  const toggleRecording = async () => {\n    if (isRecording) {\n      setIsRecording(false);\n      if (recorderRef.current) {\n        const audioBlob = await recorderRef.current.stopRecording();\n        const url = AudioRecorder.createAudioURL(audioBlob);\n        setAudioURL(url);\n        const userInput = await transcribeAudio(audioBlob);\n        await sendUserMessage(userInput);\n      }\n    } else {\n      if (recorderRef.current) {\n        await recorderRef.current.startRecording();\n        setIsRecording(true);\n      }\n    }\n  };\n\n  const handlePlayAudio = (text: string, id: string) => {\n    if ('speechSynthesis' in window) {\n      if (isPlaying === id) {\n        window.speechSynthesis.cancel();\n        setIsPlaying(null);\n        return;\n      }\n      if (isPlaying) window.speechSynthesis.cancel();\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.lang = /[„Ñ±-„Öé|Í∞Ä-Ìû£]/.test(text) ? 'ko-KR' : 'en-US';\n      utteranceRef.current = utterance;\n      setIsPlaying(id);\n      utterance.onend = () => {\n        setIsPlaying(null);\n        utteranceRef.current = null;\n      };\n      window.speechSynthesis.speak(utterance);\n    }\n  };\n\n  const contextValue: LearningContextType = {\n    messages,\n    currentStage,\n    feedback,\n    isRecording,\n    audioURL,\n    isPlaying,\n    showFeedbackContent,\n    aiHasResponded,\n    addMessage,\n    setCurrentStage,\n    setFeedback,\n    toggleRecording,\n    handlePlayAudio,\n    setShowFeedbackContent,\n    setAiHasResponded,\n    createChat\n  };\n\n  return (\n    <LearningContext.Provider value={contextValue}>\n      {children}\n    </LearningContext.Provider>\n  );\n};\n\nexport const useLearning = () => {\n  const context = useContext(LearningContext);\n  if (context === undefined) {\n    throw new Error('useLearning must be used within a LearningProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}