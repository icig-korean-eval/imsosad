{"ast":null,"code":"/*\r\n * Copyright (c) 2017-2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview A function to swap endianness in byte buffers.\r\n * @see https://github.com/rochars/byte-data\r\n * @see https://github.com/rochars/wavefile\r\n */\n\n/**\r\n * Swap the byte ordering in a buffer. The buffer is modified in place.\r\n * @param {!(Array<number>|Uint8Array)} bytes The bytes.\r\n * @param {number} offset The byte offset.\r\n * @param {number=} [start=0] The start index.\r\n * @param {number=} [end=bytes.length] The end index.\r\n */\nexport function endianness(bytes, offset, start = 0, end = bytes.length) {\n  for (let index = start; index < end; index += offset) {\n    swap_(bytes, offset, index);\n  }\n}\n\n/**\r\n * Swap the byte order of a value in a buffer. The buffer is modified in place.\r\n * @param {!(Array<number>|Uint8Array)} bytes The bytes.\r\n * @param {number} offset The byte offset.\r\n * @param {number} index The start index.\r\n * @private\r\n */\nfunction swap_(bytes, offset, index) {\n  offset--;\n  for (let x = 0; x < offset; x++) {\n    /** @type {number} */\n    let theByte = bytes[index + x];\n    bytes[index + x] = bytes[index + offset];\n    bytes[index + offset] = theByte;\n    offset--;\n  }\n}","map":{"version":3,"names":["endianness","bytes","offset","start","end","length","index","swap_","x","theByte"],"sources":["C:/Users/kimmi/Desktop/learning-interface/learning-interface/node_modules/wavefile/lib/parsers/binary/lib/endianness.js"],"sourcesContent":["/*\r\n * Copyright (c) 2017-2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview A function to swap endianness in byte buffers.\r\n * @see https://github.com/rochars/byte-data\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\n/**\r\n * Swap the byte ordering in a buffer. The buffer is modified in place.\r\n * @param {!(Array<number>|Uint8Array)} bytes The bytes.\r\n * @param {number} offset The byte offset.\r\n * @param {number=} [start=0] The start index.\r\n * @param {number=} [end=bytes.length] The end index.\r\n */\r\nexport function endianness(bytes, offset, start=0, end=bytes.length) {\r\n  for (let index = start; index < end; index += offset) {\r\n    swap_(bytes, offset, index);\r\n  }\r\n}\r\n\r\n/**\r\n * Swap the byte order of a value in a buffer. The buffer is modified in place.\r\n * @param {!(Array<number>|Uint8Array)} bytes The bytes.\r\n * @param {number} offset The byte offset.\r\n * @param {number} index The start index.\r\n * @private\r\n */\r\nfunction swap_(bytes, offset, index) {\r\n  offset--;\r\n  for(let x = 0; x < offset; x++) {\r\n    /** @type {number} */\r\n    let theByte = bytes[index + x];\r\n    bytes[index + x] = bytes[index + offset];\r\n    bytes[index + offset] = theByte;\r\n    offset--;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,GAAC,CAAC,EAAEC,GAAG,GAACH,KAAK,CAACI,MAAM,EAAE;EACnE,KAAK,IAAIC,KAAK,GAAGH,KAAK,EAAEG,KAAK,GAAGF,GAAG,EAAEE,KAAK,IAAIJ,MAAM,EAAE;IACpDK,KAAK,CAACN,KAAK,EAAEC,MAAM,EAAEI,KAAK,CAAC;EAC7B;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACN,KAAK,EAAEC,MAAM,EAAEI,KAAK,EAAE;EACnCJ,MAAM,EAAE;EACR,KAAI,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAEM,CAAC,EAAE,EAAE;IAC9B;IACA,IAAIC,OAAO,GAAGR,KAAK,CAACK,KAAK,GAAGE,CAAC,CAAC;IAC9BP,KAAK,CAACK,KAAK,GAAGE,CAAC,CAAC,GAAGP,KAAK,CAACK,KAAK,GAAGJ,MAAM,CAAC;IACxCD,KAAK,CAACK,KAAK,GAAGJ,MAAM,CAAC,GAAGO,OAAO;IAC/BP,MAAM,EAAE;EACV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}