{"ast":null,"code":"/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview The WaveFileTagEditor class.\r\n * @see https://github.com/rochars/wavefile\r\n */\n\nimport { WaveFileCreator } from './wavefile-creator';\n\n/**\r\n * A class to edit meta information in wav files.\r\n * @extends WaveFileCreator\r\n * @ignore\r\n */\nexport class WaveFileTagEditor extends WaveFileCreator {\n  /**\r\n   * Return the value of a RIFF tag in the INFO chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {?string} The value if the tag is found, null otherwise.\r\n   */\n  getTag(tag) {\n    /** @type {!Object} */\n    let index = this.getTagIndex_(tag);\n    if (index.TAG !== null) {\n      return this.LIST[index.LIST].subChunks[index.TAG].value;\n    }\n    return null;\n  }\n\n  /**\r\n   * Write a RIFF tag in the INFO chunk. If the tag do not exist,\r\n   * then it is created. It if exists, it is overwritten.\r\n   * @param {string} tag The tag name.\r\n   * @param {string} value The tag value.\r\n   * @throws {Error} If the tag name is not valid.\r\n   */\n  setTag(tag, value) {\n    tag = fixRIFFTag_(tag);\n    /** @type {!Object} */\n    let index = this.getTagIndex_(tag);\n    if (index.TAG !== null) {\n      this.LIST[index.LIST].subChunks[index.TAG].chunkSize = value.length + 1;\n      this.LIST[index.LIST].subChunks[index.TAG].value = value;\n    } else if (index.LIST !== null) {\n      this.LIST[index.LIST].subChunks.push({\n        chunkId: tag,\n        chunkSize: value.length + 1,\n        value: value\n      });\n    } else {\n      this.LIST.push({\n        chunkId: 'LIST',\n        chunkSize: 8 + value.length + 1,\n        format: 'INFO',\n        subChunks: []\n      });\n      this.LIST[this.LIST.length - 1].subChunks.push({\n        chunkId: tag,\n        chunkSize: value.length + 1,\n        value: value\n      });\n    }\n  }\n\n  /**\r\n   * Remove a RIFF tag from the INFO chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {boolean} True if a tag was deleted.\r\n   */\n  deleteTag(tag) {\n    /** @type {!Object} */\n    let index = this.getTagIndex_(tag);\n    if (index.TAG !== null) {\n      this.LIST[index.LIST].subChunks.splice(index.TAG, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\r\n   * Return a Object<tag, value> with the RIFF tags in the file.\r\n   * @return {!Object<string, string>} The file tags.\r\n   */\n  listTags() {\n    /** @type {?number} */\n    let index = this.getLISTIndex('INFO');\n    /** @type {!Object} */\n    let tags = {};\n    if (index !== null) {\n      for (let i = 0, len = this.LIST[index].subChunks.length; i < len; i++) {\n        tags[this.LIST[index].subChunks[i].chunkId] = this.LIST[index].subChunks[i].value;\n      }\n    }\n    return tags;\n  }\n\n  /**\r\n   * Return the index of a list by its type.\r\n   * @param {string} listType The list type ('adtl', 'INFO')\r\n   * @return {?number}\r\n   * @protected\r\n   */\n  getLISTIndex(listType) {\n    for (let i = 0, len = this.LIST.length; i < len; i++) {\n      if (this.LIST[i].format == listType) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n  /**\r\n   * Return the index of a tag in a FILE chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {!Object<string, ?number>}\r\n   *    Object.LIST is the INFO index in LIST\r\n   *    Object.TAG is the tag index in the INFO\r\n   * @private\r\n   */\n  getTagIndex_(tag) {\n    /** @type {!Object<string, ?number>} */\n    let index = {\n      LIST: null,\n      TAG: null\n    };\n    for (let i = 0, len = this.LIST.length; i < len; i++) {\n      if (this.LIST[i].format == 'INFO') {\n        index.LIST = i;\n        for (let j = 0, subLen = this.LIST[i].subChunks.length; j < subLen; j++) {\n          if (this.LIST[i].subChunks[j].chunkId == tag) {\n            index.TAG = j;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return index;\n  }\n}\n\n/**\r\n * Fix a RIFF tag format if possible, throw an error otherwise.\r\n * @param {string} tag The tag name.\r\n * @return {string} The tag name in proper fourCC format.\r\n * @private\r\n */\nfunction fixRIFFTag_(tag) {\n  if (tag.constructor !== String) {\n    throw new Error('Invalid tag name.');\n  } else if (tag.length < 4) {\n    for (let i = 0, len = 4 - tag.length; i < len; i++) {\n      tag += ' ';\n    }\n  }\n  return tag;\n}","map":{"version":3,"names":["WaveFileCreator","WaveFileTagEditor","getTag","tag","index","getTagIndex_","TAG","LIST","subChunks","value","setTag","fixRIFFTag_","chunkSize","length","push","chunkId","format","deleteTag","splice","listTags","getLISTIndex","tags","i","len","listType","j","subLen","constructor","String","Error"],"sources":["C:/Users/kimmi/Desktop/learning-interface/learning-interface/node_modules/wavefile/lib/wavefile-tag-editor.js"],"sourcesContent":["/*\r\n * Copyright (c) 2017-2019 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The WaveFileTagEditor class.\r\n * @see https://github.com/rochars/wavefile\r\n */\r\n\r\nimport { WaveFileCreator } from './wavefile-creator';\r\n\r\n/**\r\n * A class to edit meta information in wav files.\r\n * @extends WaveFileCreator\r\n * @ignore\r\n */\r\nexport class WaveFileTagEditor extends WaveFileCreator {\r\n\r\n  /**\r\n   * Return the value of a RIFF tag in the INFO chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {?string} The value if the tag is found, null otherwise.\r\n   */\r\n  getTag(tag) {\r\n    /** @type {!Object} */\r\n    let index = this.getTagIndex_(tag);\r\n    if (index.TAG !== null) {\r\n      return this.LIST[index.LIST].subChunks[index.TAG].value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Write a RIFF tag in the INFO chunk. If the tag do not exist,\r\n   * then it is created. It if exists, it is overwritten.\r\n   * @param {string} tag The tag name.\r\n   * @param {string} value The tag value.\r\n   * @throws {Error} If the tag name is not valid.\r\n   */\r\n  setTag(tag, value) {\r\n    tag = fixRIFFTag_(tag);\r\n    /** @type {!Object} */\r\n    let index = this.getTagIndex_(tag);\r\n    if (index.TAG !== null) {\r\n      this.LIST[index.LIST].subChunks[index.TAG].chunkSize =\r\n        value.length + 1;\r\n      this.LIST[index.LIST].subChunks[index.TAG].value = value;\r\n    } else if (index.LIST !== null) {\r\n      this.LIST[index.LIST].subChunks.push({\r\n        chunkId: tag,\r\n        chunkSize: value.length + 1,\r\n        value: value});\r\n    } else {\r\n      this.LIST.push({\r\n        chunkId: 'LIST',\r\n        chunkSize: 8 + value.length + 1,\r\n        format: 'INFO',\r\n        subChunks: []});\r\n      this.LIST[this.LIST.length - 1].subChunks.push({\r\n        chunkId: tag,\r\n        chunkSize: value.length + 1,\r\n        value: value});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a RIFF tag from the INFO chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {boolean} True if a tag was deleted.\r\n   */\r\n  deleteTag(tag) {\r\n    /** @type {!Object} */\r\n    let index = this.getTagIndex_(tag);\r\n    if (index.TAG !== null) {\r\n      this.LIST[index.LIST].subChunks.splice(index.TAG, 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Return a Object<tag, value> with the RIFF tags in the file.\r\n   * @return {!Object<string, string>} The file tags.\r\n   */\r\n  listTags() {\r\n    /** @type {?number} */\r\n    let index = this.getLISTIndex('INFO');\r\n    /** @type {!Object} */\r\n    let tags = {};\r\n    if (index !== null) {\r\n      for (let i = 0, len = this.LIST[index].subChunks.length; i < len; i++) {\r\n        tags[this.LIST[index].subChunks[i].chunkId] =\r\n          this.LIST[index].subChunks[i].value;\r\n      }\r\n    }\r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Return the index of a list by its type.\r\n   * @param {string} listType The list type ('adtl', 'INFO')\r\n   * @return {?number}\r\n   * @protected\r\n   */\r\n  getLISTIndex(listType) {\r\n    for (let i = 0, len = this.LIST.length; i < len; i++) {\r\n      if (this.LIST[i].format == listType) {\r\n        return i;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Return the index of a tag in a FILE chunk.\r\n   * @param {string} tag The tag name.\r\n   * @return {!Object<string, ?number>}\r\n   *    Object.LIST is the INFO index in LIST\r\n   *    Object.TAG is the tag index in the INFO\r\n   * @private\r\n   */\r\n  getTagIndex_(tag) {\r\n    /** @type {!Object<string, ?number>} */\r\n    let index = {LIST: null, TAG: null};\r\n    for (let i = 0, len = this.LIST.length; i < len; i++) {\r\n      if (this.LIST[i].format == 'INFO') {\r\n        index.LIST = i;\r\n        for (let j=0, subLen = this.LIST[i].subChunks.length; j < subLen; j++) {\r\n          if (this.LIST[i].subChunks[j].chunkId == tag) {\r\n            index.TAG = j;\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n}\r\n\r\n/**\r\n * Fix a RIFF tag format if possible, throw an error otherwise.\r\n * @param {string} tag The tag name.\r\n * @return {string} The tag name in proper fourCC format.\r\n * @private\r\n */\r\nfunction fixRIFFTag_(tag) {\r\n  if (tag.constructor !== String) {\r\n    throw new Error('Invalid tag name.');\r\n  } else if (tag.length < 4) {\r\n    for (let i = 0, len = 4 - tag.length; i < len; i++) {\r\n      tag += ' ';\r\n    }\r\n  }\r\n  return tag;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}