{"ast":null,"code":"/*\r\n * Copyright (c) 2017-2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview A module to change the bit depth of PCM samples.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/rochars/bitdepth\r\n */\n\n/**\r\n * Change the bit depth of PCM samples.\r\n * @param {!Array|!TypedArray} samples The original samples.\r\n * @param {string} bithDepth The original bit depth.\r\n * @param {!TypedArray} newSamples The output array.\r\n * @param {string} targetBitDepth The target bit depth.\r\n * @throws {Error} If original or target bit depths are not valid.\r\n */\nexport function changeBitDepth(samples, bithDepth, newSamples, targetBitDepth) {\n  // float to float, just copy the values\n  if ([\"32f\", \"64\"].indexOf(bithDepth) > -1 && [\"32f\", \"64\"].indexOf(targetBitDepth) > -1) {\n    newSamples.set(samples);\n    return;\n  }\n  validateBitDepth_(bithDepth);\n  validateBitDepth_(targetBitDepth);\n  /** @type {!Function} */\n  let toFunction = getBitDepthFunction_(bithDepth, targetBitDepth);\n  /** @type {!Object<string, number>} */\n  let options = {\n    oldMin: Math.pow(2, parseInt(bithDepth, 10)) / 2,\n    newMin: Math.pow(2, parseInt(targetBitDepth, 10)) / 2,\n    oldMax: Math.pow(2, parseInt(bithDepth, 10)) / 2 - 1,\n    newMax: Math.pow(2, parseInt(targetBitDepth, 10)) / 2 - 1\n  };\n  // sign the samples if original is 8-bit\n  sign8Bit_(bithDepth, samples, true);\n  // change the resolution of the samples\n  for (let i = 0, len = samples.length; i < len; i++) {\n    newSamples[i] = toFunction(samples[i], options);\n  }\n  // unsign the samples if target is 8-bit\n  sign8Bit_(targetBitDepth, newSamples, false);\n}\n\n/**\r\n * Change the bit depth from int to int.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\nfunction intToInt_(sample, args) {\n  if (sample > 0) {\n    sample = parseInt(sample / args.oldMax * args.newMax, 10);\n  } else {\n    sample = parseInt(sample / args.oldMin * args.newMin, 10);\n  }\n  return sample;\n}\n\n/**\r\n * Change the bit depth from float to int.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\nfunction floatToInt_(sample, args) {\n  return parseInt(sample > 0 ? sample * args.newMax : sample * args.newMin, 10);\n}\n\n/**\r\n * Change the bit depth from int to float.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\nfunction intToFloat_(sample, args) {\n  return sample > 0 ? sample / args.oldMax : sample / args.oldMin;\n}\n\n/**\r\n * Return the function to change the bit depth of a sample.\r\n * @param {string} original The original bit depth of the data.\r\n * @param {string} target The new bit depth of the data.\r\n * @return {!Function}\r\n * @private\r\n */\nfunction getBitDepthFunction_(original, target) {\n  /** @type {!Function} */\n  let func = function (x) {\n    return x;\n  };\n  if (original != target) {\n    if ([\"32f\", \"64\"].includes(original)) {\n      func = floatToInt_;\n    } else {\n      if ([\"32f\", \"64\"].includes(target)) {\n        func = intToFloat_;\n      } else {\n        func = intToInt_;\n      }\n    }\n  }\n  return func;\n}\n\n/**\r\n * Validate the bit depth.\r\n * @param {string} bitDepth The original bit depth.\r\n * @throws {Error} If bit depth is not valid.\r\n * @private\r\n */\nfunction validateBitDepth_(bitDepth) {\n  if (bitDepth != \"32f\" && bitDepth != \"64\" && (parseInt(bitDepth, 10) < \"8\" || parseInt(bitDepth, 10) > \"53\")) {\n    throw new Error(\"Invalid bit depth.\");\n  }\n}\n\n/**\r\n * Sign samples if they are 8-bit.\r\n * @param {string} bitDepth The bit depth code.\r\n * @param {!Array|!TypedArray} samples The samples.\r\n * @param {boolean} sign True to sign, false to unsign.\r\n * @private\r\n */\nfunction sign8Bit_(bitDepth, samples, sign) {\n  if (bitDepth == \"8\") {\n    let factor = sign ? -128 : 128;\n    for (let i = 0, len = samples.length; i < len; i++) {\n      samples[i] = samples[i] += factor;\n    }\n  }\n}","map":{"version":3,"names":["changeBitDepth","samples","bithDepth","newSamples","targetBitDepth","indexOf","set","validateBitDepth_","toFunction","getBitDepthFunction_","options","oldMin","Math","pow","parseInt","newMin","oldMax","newMax","sign8Bit_","i","len","length","intToInt_","sample","args","floatToInt_","intToFloat_","original","target","func","x","includes","bitDepth","Error","sign","factor"],"sources":["C:/Users/kimmi/Desktop/learning-interface/learning-interface/node_modules/wavefile/lib/codecs/bitdepth.js"],"sourcesContent":["/*\r\n * Copyright (c) 2017-2018 Rafael da Silva Rocha.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview A module to change the bit depth of PCM samples.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/rochars/bitdepth\r\n */\r\n\r\n/**\r\n * Change the bit depth of PCM samples.\r\n * @param {!Array|!TypedArray} samples The original samples.\r\n * @param {string} bithDepth The original bit depth.\r\n * @param {!TypedArray} newSamples The output array.\r\n * @param {string} targetBitDepth The target bit depth.\r\n * @throws {Error} If original or target bit depths are not valid.\r\n */\r\nexport function changeBitDepth(samples, bithDepth, newSamples, targetBitDepth) {\r\n  // float to float, just copy the values\r\n  if ([\"32f\",\"64\"].indexOf(bithDepth) > -1 &&\r\n    [\"32f\",\"64\"].indexOf(targetBitDepth) > -1) {\r\n    newSamples.set(samples);\r\n    return;\r\n  }\r\n  validateBitDepth_(bithDepth);\r\n  validateBitDepth_(targetBitDepth);\r\n  /** @type {!Function} */\r\n  let toFunction = getBitDepthFunction_(bithDepth, targetBitDepth);\r\n  /** @type {!Object<string, number>} */\r\n  let options = {\r\n    oldMin: Math.pow(2, parseInt(bithDepth, 10)) / 2,\r\n    newMin: Math.pow(2, parseInt(targetBitDepth, 10)) / 2,\r\n    oldMax: (Math.pow(2, parseInt(bithDepth, 10)) / 2) - 1,\r\n    newMax: (Math.pow(2, parseInt(targetBitDepth, 10)) / 2) - 1,\r\n  };\r\n  // sign the samples if original is 8-bit\r\n  sign8Bit_(bithDepth, samples, true);\r\n  // change the resolution of the samples\r\n  for (let i = 0, len = samples.length; i < len; i++) {        \r\n    newSamples[i] = toFunction(samples[i], options);\r\n  }\r\n  // unsign the samples if target is 8-bit\r\n  sign8Bit_(targetBitDepth, newSamples, false);\r\n}\r\n\r\n/**\r\n * Change the bit depth from int to int.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction intToInt_(sample, args) {\r\n  if (sample > 0) {\r\n    sample = parseInt((sample / args.oldMax) * args.newMax, 10);\r\n  } else {\r\n    sample = parseInt((sample / args.oldMin) * args.newMin, 10);\r\n  }\r\n  return sample;\r\n}\r\n\r\n/**\r\n * Change the bit depth from float to int.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction floatToInt_(sample, args) {\r\n  return parseInt(\r\n    sample > 0 ? sample * args.newMax : sample * args.newMin, 10);\r\n}\r\n\r\n/**\r\n * Change the bit depth from int to float.\r\n * @param {number} sample The sample.\r\n * @param {!Object<string, number>} args Data about the bit depths.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction intToFloat_(sample, args) {\r\n  return sample > 0 ? sample / args.oldMax : sample / args.oldMin;\r\n}\r\n\r\n/**\r\n * Return the function to change the bit depth of a sample.\r\n * @param {string} original The original bit depth of the data.\r\n * @param {string} target The new bit depth of the data.\r\n * @return {!Function}\r\n * @private\r\n */\r\nfunction getBitDepthFunction_(original, target) {\r\n  /** @type {!Function} */\r\n  let func = function(x) {return x;};\r\n  if (original != target) {\r\n    if ([\"32f\", \"64\"].includes(original)) {\r\n      func = floatToInt_;\r\n    } else {\r\n      if ([\"32f\", \"64\"].includes(target)) {\r\n        func = intToFloat_;\r\n      } else {\r\n        func = intToInt_;\r\n      }\r\n    }\r\n  }\r\n  return func;\r\n}\r\n\r\n/**\r\n * Validate the bit depth.\r\n * @param {string} bitDepth The original bit depth.\r\n * @throws {Error} If bit depth is not valid.\r\n * @private\r\n */\r\nfunction validateBitDepth_(bitDepth) {\r\n  if ((bitDepth != \"32f\" && bitDepth != \"64\") &&\r\n      (parseInt(bitDepth, 10) < \"8\" || parseInt(bitDepth, 10) > \"53\")) {\r\n    throw new Error(\"Invalid bit depth.\");\r\n  }\r\n}\r\n\r\n/**\r\n * Sign samples if they are 8-bit.\r\n * @param {string} bitDepth The bit depth code.\r\n * @param {!Array|!TypedArray} samples The samples.\r\n * @param {boolean} sign True to sign, false to unsign.\r\n * @private\r\n */\r\nfunction sign8Bit_(bitDepth, samples, sign) {\r\n  if (bitDepth == \"8\") {\r\n    let factor = sign ? -128 : 128;\r\n    for (let i = 0, len = samples.length; i < len; i++) {\r\n      samples[i] = samples[i] += factor;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}