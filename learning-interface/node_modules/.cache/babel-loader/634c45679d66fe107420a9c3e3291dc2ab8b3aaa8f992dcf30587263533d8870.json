{"ast":null,"code":"/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright 2012 Spencer Cohen\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\n\n/**\r\n * @fileoverview The Interpolator class. Based on Smooth.js by Spencer Cohen.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/osuushi/Smooth.js\r\n */\n\n/**\r\n * A class to get scaled values out of arrays.\r\n * @extends WaveFileReader\r\n */\nexport class Interpolator {\n  /**\r\n   * @param {number} scaleFrom the length of the original array.\r\n   * @param {number} scaleTo The length of the new array.\r\n   * @param {!Object} details The extra configuration, if needed.\r\n   */\n  constructor(scaleFrom, scaleTo, details) {\n    /**\r\n     * The length of the original array.\r\n     * @type {number}\r\n     */\n    this.length_ = scaleFrom;\n    /**\r\n     * The scaling factor.\r\n     * @type {number}\r\n     */\n    this.scaleFactor_ = (scaleFrom - 1) / scaleTo;\n    /**\r\n     * The interpolation function.\r\n     * @type {Function}\r\n     */\n    this.interpolate = this.sinc;\n    if (details.method === 'point') {\n      this.interpolate = this.point;\n    } else if (details.method === 'linear') {\n      this.interpolate = this.linear;\n    } else if (details.method === 'cubic') {\n      this.interpolate = this.cubic;\n    }\n    /**\r\n     * The tanget factor for cubic interpolation.\r\n     * @type {number}\r\n     */\n    this.tangentFactor_ = 1 - Math.max(0, Math.min(1, details.tension || 0));\n    // Configure the kernel for sinc\n    /**\r\n     * The sinc filter size.\r\n     * @type {number}\r\n     */\n    this.sincFilterSize_ = details.sincFilterSize || 1;\n    /**\r\n     * The sinc kernel.\r\n     * @type {Function}\r\n     */\n    this.kernel_ = sincKernel_(details.sincWindow || window_);\n  }\n\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\n  point(t, samples) {\n    return this.getClippedInput_(Math.round(this.scaleFactor_ * t), samples);\n  }\n\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\n  linear(t, samples) {\n    t = this.scaleFactor_ * t;\n    /** @type {number} */\n    let k = Math.floor(t);\n    t -= k;\n    return (1 - t) * this.getClippedInput_(k, samples) + t * this.getClippedInput_(k + 1, samples);\n  }\n\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\n  cubic(t, samples) {\n    t = this.scaleFactor_ * t;\n    /** @type {number} */\n    let k = Math.floor(t);\n    /** @type {Array<number>} */\n    let m = [this.getTangent_(k, samples), this.getTangent_(k + 1, samples)];\n    /** @type {Array<number>} */\n    let p = [this.getClippedInput_(k, samples), this.getClippedInput_(k + 1, samples)];\n    t -= k;\n    /** @type {number} */\n    let t2 = t * t;\n    /** @type {number} */\n    let t3 = t * t2;\n    return (2 * t3 - 3 * t2 + 1) * p[0] + (t3 - 2 * t2 + t) * m[0] + (-2 * t3 + 3 * t2) * p[1] + (t3 - t2) * m[1];\n  }\n\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\n  sinc(t, samples) {\n    t = this.scaleFactor_ * t;\n    /** @type {number} */\n    let k = Math.floor(t);\n    /** @type {number} */\n    let ref = k - this.sincFilterSize_ + 1;\n    /** @type {number} */\n    let ref1 = k + this.sincFilterSize_;\n    /** @type {number} */\n    let sum = 0;\n    for (let n = ref; n <= ref1; n++) {\n      sum += this.kernel_(t - n) * this.getClippedInput_(n, samples);\n    }\n    return sum;\n  }\n\n  /**\r\n   * @param {number} k The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The tangent.\r\n   * @private\r\n   */\n  getTangent_(k, samples) {\n    return this.tangentFactor_ * (this.getClippedInput_(k + 1, samples) - this.getClippedInput_(k - 1, samples)) / 2;\n  }\n\n  /**\r\n   * @param {number} t The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   * @private\r\n   */\n  getClippedInput_(t, samples) {\n    if (0 <= t && t < this.length_) {\n      return samples[t];\n    }\n    return 0;\n  }\n}\n\n/**\r\n * The default window function.\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\nfunction window_(x) {\n  return Math.exp(-x / 2 * x / 2);\n}\n\n/**\r\n * @param {Function} window The window function.\r\n * @return {Function}\r\n * @private\r\n */\nfunction sincKernel_(window) {\n  return function (x) {\n    return sinc_(x) * window(x);\n  };\n}\n\n/**\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\nfunction sinc_(x) {\n  if (x === 0) {\n    return 1;\n  }\n  return Math.sin(Math.PI * x) / (Math.PI * x);\n}","map":{"version":3,"names":["Interpolator","constructor","scaleFrom","scaleTo","details","length_","scaleFactor_","interpolate","sinc","method","point","linear","cubic","tangentFactor_","Math","max","min","tension","sincFilterSize_","sincFilterSize","kernel_","sincKernel_","sincWindow","window_","t","samples","getClippedInput_","round","k","floor","m","getTangent_","p","t2","t3","ref","ref1","sum","n","x","exp","window","sinc_","sin","PI"],"sources":["C:/Users/kimmi/Desktop/learning-interface/learning-interface/node_modules/wavefile/lib/resampler/interpolator.js"],"sourcesContent":["/*\r\n * Copyright (c) 2019 Rafael da Silva Rocha.\r\n * Copyright 2012 Spencer Cohen\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\n/**\r\n * @fileoverview The Interpolator class. Based on Smooth.js by Spencer Cohen.\r\n * @see https://github.com/rochars/wavefile\r\n * @see https://github.com/osuushi/Smooth.js\r\n */\r\n\r\n/**\r\n * A class to get scaled values out of arrays.\r\n * @extends WaveFileReader\r\n */\r\nexport class Interpolator {\r\n  \r\n  /**\r\n   * @param {number} scaleFrom the length of the original array.\r\n   * @param {number} scaleTo The length of the new array.\r\n   * @param {!Object} details The extra configuration, if needed.\r\n   */\r\n  constructor(scaleFrom, scaleTo, details) {\r\n    /**\r\n     * The length of the original array.\r\n     * @type {number}\r\n     */\r\n    this.length_ = scaleFrom;\r\n    /**\r\n     * The scaling factor.\r\n     * @type {number}\r\n     */\r\n    this.scaleFactor_ = (scaleFrom - 1) / scaleTo;\r\n    /**\r\n     * The interpolation function.\r\n     * @type {Function}\r\n     */\r\n    this.interpolate = this.sinc;\r\n    if (details.method === 'point') {\r\n    \tthis.interpolate = this.point;\r\n    } else if(details.method === 'linear') {\r\n    \tthis.interpolate = this.linear;\r\n    } else if(details.method === 'cubic') {\r\n    \tthis.interpolate = this.cubic;\r\n    }\r\n    /**\r\n     * The tanget factor for cubic interpolation.\r\n     * @type {number}\r\n     */\r\n    this.tangentFactor_ = 1 - Math.max(0, Math.min(1, details.tension || 0));\r\n    // Configure the kernel for sinc\r\n    /**\r\n     * The sinc filter size.\r\n     * @type {number}\r\n     */\r\n    this.sincFilterSize_ = details.sincFilterSize || 1;\r\n    /**\r\n     * The sinc kernel.\r\n     * @type {Function}\r\n     */\r\n    this.kernel_ = sincKernel_(details.sincWindow || window_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  point(t, samples) {\r\n    return this.getClippedInput_(Math.round(this.scaleFactor_ * t), samples);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  linear(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    t -= k;\r\n    return (1 - t) *\r\n    \tthis.getClippedInput_(k, samples) + t *\r\n    \tthis.getClippedInput_(k + 1, samples);\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  cubic(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    /** @type {Array<number>} */\r\n    let m = [this.getTangent_(k, samples), this.getTangent_(k + 1, samples)];\r\n    /** @type {Array<number>} */\r\n    let p = [this.getClippedInput_(k, samples),\r\n      this.getClippedInput_(k + 1, samples)];\r\n    t -= k;\r\n    /** @type {number} */\r\n    let t2 = t * t;\r\n    /** @type {number} */\r\n    let t3 = t * t2;\r\n    return (2 * t3 - 3 * t2 + 1) *\r\n      p[0] + (t3 - 2 * t2 + t) *\r\n      m[0] + (-2 * t3 + 3 * t2) *\r\n      p[1] + (t3 - t2) * m[1];\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   */\r\n  sinc(t, samples) {\r\n    t = this.scaleFactor_ * t;\r\n    /** @type {number} */\r\n    let k = Math.floor(t);\r\n    /** @type {number} */\r\n    let ref = k - this.sincFilterSize_ + 1;\r\n    /** @type {number} */\r\n    let ref1 = k + this.sincFilterSize_;\r\n    /** @type {number} */\r\n    let sum = 0;\r\n    for (let n = ref; n <= ref1; n++) {\r\n      sum += this.kernel_(t - n) * this.getClippedInput_(n, samples);\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  /**\r\n   * @param {number} k The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The tangent.\r\n   * @private\r\n   */\r\n  getTangent_(k, samples) {\r\n    return this.tangentFactor_ *\r\n      (this.getClippedInput_(k + 1, samples) -\r\n        this.getClippedInput_(k - 1, samples)) / 2;\r\n  }\r\n\r\n  /**\r\n   * @param {number} t The scaled index to interpolate.\r\n   * @param {Array<number>|TypedArray} samples the original array.\r\n   * @return {number} The interpolated value.\r\n   * @private\r\n   */\r\n  getClippedInput_(t, samples) {\r\n    if ((0 <= t && t < this.length_)) {\r\n      return samples[t];\r\n    }\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * The default window function.\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction window_(x) {\r\n  return Math.exp(-x / 2 * x / 2);\r\n}\r\n\r\n/**\r\n * @param {Function} window The window function.\r\n * @return {Function}\r\n * @private\r\n */\r\nfunction sincKernel_(window) {\r\n  return function(x) { return sinc_(x) * window(x); };\r\n}\r\n\r\n/**\r\n * @param {number} x The sinc signal.\r\n * @return {number}\r\n * @private\r\n */\r\nfunction sinc_(x) {\r\n  if (x === 0) {\r\n    return 1;\r\n  }\r\n  return Math.sin(Math.PI * x) / (Math.PI * x);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}